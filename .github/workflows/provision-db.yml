name: Provision Database

on:
  workflow_dispatch:

jobs:
  provision:
    runs-on: ubuntu-latest

    # Toma primero Secrets; si no hay, usa Repo Variables (Settings → Variables)
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL || vars.DATABASE_URL }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL || vars.SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY || vars.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY || vars.SUPABASE_SERVICE_ROLE_KEY }}
      MIGRATIONS_DIR: supabase/migrations

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary python-dotenv

      - name: Validate env
        shell: bash
        run: |
          set -e
          [ -n "${DATABASE_URL}" ] || { echo "❌ Falta DATABASE_URL (Secret o Var)"; exit 1; }
          echo "${DATABASE_URL}" | grep -Eq '^postgres(ql)?://' || { echo "❌ DATABASE_URL debe iniciar con postgresql://"; exit 1; }
          [ -d "${MIGRATIONS_DIR}" ] || { echo "❌ No existe el directorio ${MIGRATIONS_DIR}"; exit 1; }
          echo "✅ Variables OK"

      - name: Apply migrations
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          MIGRATIONS_DIR: ${{ env.MIGRATIONS_DIR }}
        run: |
          python - <<'PYCODE'
import os, glob, psycopg2

dburl = os.environ["DATABASE_URL"]
# Forzar SSL para Supabase si no viene
if "sslmode=" not in dburl:
    dburl += ("&" if "?" in dburl else "?") + "sslmode=require"

migrations_dir = os.environ.get("MIGRATIONS_DIR", "supabase/migrations")

conn = psycopg2.connect(dburl)
conn.autocommit = True
print(f"Applying migrations from: {migrations_dir}")

paths = sorted(glob.glob(os.path.join(migrations_dir, "*.sql")))
if not paths:
    print("⚠️  No se encontraron archivos .sql"); raise SystemExit(0)

with conn.cursor() as cur:
    for p in paths:
        print(f"-> {p}")
        with open(p, "r", encoding="utf-8") as f:
            cur.execute(f.read())
print("✅ All migrations applied.")
conn.close()
PYCODE
